// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `extract_supported_nuts`, `get_database_path`, `load_wallets_from_database`, `parse_seed_from_hex`, `wallet_database_exists`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `try_from`

/// Initialize MultiMintWallet
Future<String> initMultiMintWallet({
  required String databaseDir,
  required String seedHex,
}) => RustLib.instance.api.crateApiCashuInitMultiMintWallet(
  databaseDir: databaseDir,
  seedHex: seedHex,
);

/// Add a mint to MultiMintWallet
Future<String> addMint({required String mintUrl, required String unit}) =>
    RustLib.instance.api.crateApiCashuAddMint(mintUrl: mintUrl, unit: unit);

/// Remove a mint from MultiMintWallet
Future<String> removeMint({required String mintUrl, required String unit}) =>
    RustLib.instance.api.crateApiCashuRemoveMint(mintUrl: mintUrl, unit: unit);

/// List all mints in MultiMintWallet
Future<List<String>> listMints() =>
    RustLib.instance.api.crateApiCashuListMints();

/// Check if wallet exists
Future<bool> walletExists({
  required String mintUrl,
  required String databaseDir,
}) => RustLib.instance.api.crateApiCashuWalletExists(
  mintUrl: mintUrl,
  databaseDir: databaseDir,
);

/// Create a new CDK Wallet
Future<String> createWallet({
  required String mintUrl,
  required String unit,
  required String databaseDir,
}) => RustLib.instance.api.crateApiCashuCreateWallet(
  mintUrl: mintUrl,
  unit: unit,
  databaseDir: databaseDir,
);

/// Get wallet information quickly (without network requests)
Future<WalletInfo> getWalletInfoFast({
  required String mintUrl,
  required String unit,
}) => RustLib.instance.api.crateApiCashuGetWalletInfoFast(
  mintUrl: mintUrl,
  unit: unit,
);

/// Get all transactions from all mints (fast, no network requests)
Future<List<TransactionInfo>> getAllTransactions() =>
    RustLib.instance.api.crateApiCashuGetAllTransactions();

/// Get all wallet balances from all mints (fast, no network requests)
Future<Map<String, BigInt>> getAllBalances() =>
    RustLib.instance.api.crateApiCashuGetAllBalances();

/// Get mint information from NUT-06 endpoint
Future<MintInfo> getMintInfo({required String mintUrl, required String unit}) =>
    RustLib.instance.api.crateApiCashuGetMintInfo(mintUrl: mintUrl, unit: unit);

/// Send tokens
Future<String> sendTokens({
  required String mintUrl,
  required String unit,
  required BigInt amount,
  String? memo,
}) => RustLib.instance.api.crateApiCashuSendTokens(
  mintUrl: mintUrl,
  unit: unit,
  amount: amount,
  memo: memo,
);

/// Receive tokens
Future<BigInt> receiveTokens({
  required String mintUrl,
  required String unit,
  required String token,
  String? memo,
}) => RustLib.instance.api.crateApiCashuReceiveTokens(
  mintUrl: mintUrl,
  unit: unit,
  token: token,
  memo: memo,
);

/// Create mint quote
Future<Map<String, String>> createMintQuote({
  required String mintUrl,
  required String unit,
  required BigInt amount,
}) => RustLib.instance.api.crateApiCashuCreateMintQuote(
  mintUrl: mintUrl,
  unit: unit,
  amount: amount,
);

/// Check mint quote status
Future<String> checkMintQuoteStatus({
  required String mintUrl,
  required String unit,
  required String quoteId,
}) => RustLib.instance.api.crateApiCashuCheckMintQuoteStatus(
  mintUrl: mintUrl,
  unit: unit,
  quoteId: quoteId,
);

/// Mint tokens from quote
Future<BigInt> mintFromQuote({
  required String mintUrl,
  required String unit,
  required String quoteId,
}) => RustLib.instance.api.crateApiCashuMintFromQuote(
  mintUrl: mintUrl,
  unit: unit,
  quoteId: quoteId,
);

/// Get wallet proofs
Future<List<CashuProof>> getWalletProofs({
  required String mintUrl,
  required String unit,
}) => RustLib.instance.api.crateApiCashuGetWalletProofs(
  mintUrl: mintUrl,
  unit: unit,
);

/// Create a new Cashu proof (helper function)
Future<CashuProof> createCashuProof({
  required String id,
  required BigInt amount,
  required String secret,
  required String c,
}) => RustLib.instance.api.crateApiCashuCreateCashuProof(
  id: id,
  amount: amount,
  secret: secret,
  c: c,
);

/// Parse Cashu token string
Future<Map<String, String>> parseCashuToken({required String token}) =>
    RustLib.instance.api.crateApiCashuParseCashuToken(token: token);

/// Validate Cashu proof
Future<bool> validateCashuProof({required CashuProof proof}) =>
    RustLib.instance.api.crateApiCashuValidateCashuProof(proof: proof);

/// Generate a new BIP39 mnemonic phrase (12 or 24 words)
Future<String> generateMnemonicPhrase({required int wordCount}) => RustLib
    .instance
    .api
    .crateApiCashuGenerateMnemonicPhrase(wordCount: wordCount);

/// Convert mnemonic phrase to seed hex (64 hex characters)
Future<String> mnemonicToSeedHex({required String mnemonicPhrase}) => RustLib
    .instance
    .api
    .crateApiCashuMnemonicToSeedHex(mnemonicPhrase: mnemonicPhrase);

/// Convert seed hex to mnemonic phrase (for verification/testing)
Future<String> seedHexToMnemonic({required String seedHex}) =>
    RustLib.instance.api.crateApiCashuSeedHexToMnemonic(seedHex: seedHex);

/// Validate a mnemonic phrase
Future<bool> validateMnemonicPhrase({required String mnemonicPhrase}) => RustLib
    .instance
    .api
    .crateApiCashuValidateMnemonicPhrase(mnemonicPhrase: mnemonicPhrase);

/// Create a lightning invoice for receiving payment
Future<String> createLightningInvoice({
  required String mintUrl,
  required BigInt amount,
  String? memo,
}) => RustLib.instance.api.crateApiCashuCreateLightningInvoice(
  mintUrl: mintUrl,
  amount: amount,
  memo: memo,
);

/// Check if a lightning invoice has been paid
Future<bool> checkLightningInvoiceStatus({
  required String mintUrl,
  required String quoteId,
}) => RustLib.instance.api.crateApiCashuCheckLightningInvoiceStatus(
  mintUrl: mintUrl,
  quoteId: quoteId,
);

/// Mint tokens from a paid lightning invoice
Future<String> mintFromLightningInvoice({
  required String mintUrl,
  required String quoteId,
}) => RustLib.instance.api.crateApiCashuMintFromLightningInvoice(
  mintUrl: mintUrl,
  quoteId: quoteId,
);

/// Cashu proof structure for FFI
class CashuProof {
  final String id;
  final BigInt amount;
  final String secret;
  final String c;

  const CashuProof({
    required this.id,
    required this.amount,
    required this.secret,
    required this.c,
  });

  @override
  int get hashCode =>
      id.hashCode ^ amount.hashCode ^ secret.hashCode ^ c.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CashuProof &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          amount == other.amount &&
          secret == other.secret &&
          c == other.c;
}

/// Contact information structure
class ContactInfo {
  final String method;
  final String info;

  const ContactInfo({required this.method, required this.info});

  @override
  int get hashCode => method.hashCode ^ info.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ContactInfo &&
          runtimeType == other.runtimeType &&
          method == other.method &&
          info == other.info;
}

/// Mint information structure for NUT-06
class MintInfo {
  final String? name;
  final String? version;
  final String? description;
  final String? descriptionLong;
  final List<ContactInfo>? contact;
  final String? motd;
  final String? iconUrl;
  final List<String>? urls;
  final List<String>? nuts;
  final String? publicKey;
  final String? additionalInfo;

  const MintInfo({
    this.name,
    this.version,
    this.description,
    this.descriptionLong,
    this.contact,
    this.motd,
    this.iconUrl,
    this.urls,
    this.nuts,
    this.publicKey,
    this.additionalInfo,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      version.hashCode ^
      description.hashCode ^
      descriptionLong.hashCode ^
      contact.hashCode ^
      motd.hashCode ^
      iconUrl.hashCode ^
      urls.hashCode ^
      nuts.hashCode ^
      publicKey.hashCode ^
      additionalInfo.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MintInfo &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          version == other.version &&
          description == other.description &&
          descriptionLong == other.descriptionLong &&
          contact == other.contact &&
          motd == other.motd &&
          iconUrl == other.iconUrl &&
          urls == other.urls &&
          nuts == other.nuts &&
          publicKey == other.publicKey &&
          additionalInfo == other.additionalInfo;
}

/// Transaction information structure
class TransactionInfo {
  final String id;
  final String direction;
  final BigInt amount;
  final String? memo;
  final BigInt timestamp;

  const TransactionInfo({
    required this.id,
    required this.direction,
    required this.amount,
    this.memo,
    required this.timestamp,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      direction.hashCode ^
      amount.hashCode ^
      memo.hashCode ^
      timestamp.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          direction == other.direction &&
          amount == other.amount &&
          memo == other.memo &&
          timestamp == other.timestamp;
}

/// Wallet information structure
class WalletInfo {
  final String mintUrl;
  final String unit;
  final BigInt balance;
  final String activeKeysetId;

  const WalletInfo({
    required this.mintUrl,
    required this.unit,
    required this.balance,
    required this.activeKeysetId,
  });

  @override
  int get hashCode =>
      mintUrl.hashCode ^
      unit.hashCode ^
      balance.hashCode ^
      activeKeysetId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WalletInfo &&
          runtimeType == other.runtimeType &&
          mintUrl == other.mintUrl &&
          unit == other.unit &&
          balance == other.balance &&
          activeKeysetId == other.activeKeysetId;
}
